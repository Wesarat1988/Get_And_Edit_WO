@namespace WorkOrderBlazorPlugin.Pages
@page "/workorders/{id}"
@using Contracts.WorkOrders
@inject IWorkOrderReader Reader
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components

<h3 class="mb-3">Work Order Detail</h3>

@if (loading) { <p>Loading...</p> }
else if (item is null) {
  <div class="alert alert-warning">Not found</div>
}
else {
  <dl class="row">
    <dt class="col-sm-3">Number</dt><dd class="col-sm-9">@item.Number</dd>
    <dt class="col-sm-3">Status</dt><dd class="col-sm-9">@item.Status</dd>
    <dt class="col-sm-3">Line</dt><dd class="col-sm-9">@item.Line</dd>
    <dt class="col-sm-3">Part No</dt><dd class="col-sm-9">@item.PartNo</dd>
    <dt class="col-sm-3">Created</dt><dd class="col-sm-9">@item.CreatedUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</dd>
    @if (item.DueUtc is not null) {
      <dt class="col-sm-3">Due</dt><dd class="col-sm-9">@item.DueUtc.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</dd>
    }
  </dl>
  <button class="btn btn-secondary" @onclick='() => Nav.NavigateTo("/workorders")'>Back</button>
}

@code {
  [Parameter] public string? Id { get; set; }
  WorkOrderDto? item;
  bool loading;

  protected override async Task OnParametersSetAsync()
  {
    loading = true;
    try
    {
      item = null;
      if (!string.IsNullOrWhiteSpace(Id))
      {
        item = await Reader.GetAsync(Id);
      }
    }
    finally
    {
      loading = false;
    }
  }
}
