@page "/workorders"
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject ILogger<WorkOrders> Logger
@inject IOptions<MesOptions> MesOptionsAccessor
@using System.Net
@using System.Text.Json
@using GetAndEditWO.UI.Internal

<div class="workorder-page">
    <section class="hero-card surface-card">
        <div class="hero-text">
            <span class="eyebrow">Work Order Settings</span>
            <h1>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Work Order ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à</h1>
            <p class="subtitle">‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MES ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</p>
        </div>
        <div class="hero-actions">
            <button class="btn primary" @onclick="OpenGetMoModal">
                <span class="btn-icon">üì•</span>
                <span>Get MO</span>
            </button>
            <button class="btn ghost" @onclick="ToggleEditModeAsync">
                <span class="btn-icon">@(IsEditMode ? "üíæ" : "‚úèÔ∏è")</span>
                <span>@(IsEditMode ? "Save" : "Edit MO")</span>
            </button>
        </div>
    </section>

    <section class="form-card surface-card">
        <header class="form-card-header">
            <h2>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Work Order</h2>
            <p>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</p>
        </header>

        <div class="form-grid">
            <label class="field">
                <span class="field-label">Work Order</span>
                <input class="input" @bind="WorkOrder" @bind:event="oninput" readonly="@(!IsEditMode)" />
            </label>
            <label class="field">
                <span class="field-label">Model</span>
                <input class="input" @bind="Model" @bind:event="oninput" readonly="@(!IsEditMode)" />
            </label>
            <label class="field">
                <span class="field-label">Line</span>
                <input class="input" @bind="Line" @bind:event="oninput" readonly="@(!IsEditMode)" />
            </label>
            <label class="field">
                <span class="field-label">Section</span>
                <input class="input" @bind="Section" @bind:event="oninput" readonly="@(!IsEditMode)" />
            </label>
            <label class="field">
                <span class="field-label">Group</span>
                <input class="input" @bind="Group" @bind:event="oninput" readonly="@(!IsEditMode)" />
            </label>
            <label class="field">
                <span class="field-label">Station</span>
                <input class="input" @bind="Station" @bind:event="oninput" readonly="@(!IsEditMode)" />
            </label>
        </div>

        @if (!string.IsNullOrWhiteSpace(StatusMessage))
        {
            <div class="status-banner @StatusLevel">
                <span class="status-dot"></span>
                <span>@StatusMessage</span>
            </div>
        }
    </section>
</div>

@if (ShowGetMoModal)
{
    <div class="modal-backdrop" @onclick="CloseGetMoModal">
        <div class="modal-card" @onclick:stopPropagation="true">
            <header class="modal-header">
                <div>
                    <p class="modal-eyebrow">‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                    <h2>üì• ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GetMO</h2>
                </div>
                <button class="icon-button" @onclick="CloseGetMoModal">‚úñ</button>
            </header>
            <div class="modal-body">
                <label class="field">
                    <span class="field-label">EMP_NO</span>
                    <input class="input" @bind="EmpNo" @bind:event="oninput" />
                </label>
                <label class="field">
                    <span class="field-label">FACTORY</span>
                    <input class="input" @bind="Factory" @bind:event="oninput" />
                </label>
                <label class="field">
                    <span class="field-label">LINE_NAME</span>
                    <input class="input" @bind="InputLine" @bind:event="oninput" />
                </label>
                <label class="field">
                    <span class="field-label">GETDATA_TYPE</span>
                    <select class="input" @bind="GetDataType">
                        <option value="0">0 - Mean in 180 Day</option>
                        <option value="1">1 - Mean in 7 Day</option>
                    </select>
                </label>
                <label class="field">
                    <span class="field-label">MO_TYPE</span>
                    <select class="input" @bind="MoType">
                        <option value="0">0 - Main Line</option>
                        <option value="1">1 - AI/SMT</option>
                    </select>
                </label>
                <label class="field">
                    <span class="field-label">Section</span>
                    <input class="input" @bind="Pending.Section" readonly />
                </label>
                <label class="field">
                    <span class="field-label">Group</span>
                    <input class="input" @bind="Pending.Group" readonly />
                </label>
                <label class="field">
                    <span class="field-label">Station</span>
                    <div class="input-with-button">
                        <input class="input" @bind="Pending.Station" readonly />
                        <button class="btn ghost" @onclick="OpenStationPickerAsync">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</button>
                    </div>
                </label>
            </div>
            <footer class="modal-footer">
                <button class="btn ghost" @onclick="CloseGetMoModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                <button class="btn primary" @onclick="GetMOAsync" disabled="@isLoading">@(isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á..." : "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")</button>
            </footer>
        </div>
    </div>
}

@if (ShowStationPicker)
{
    <div class="modal-backdrop" @onclick="CloseStationPicker">
        <div class="modal-card" @onclick:stopPropagation="true">
            <header class="modal-header">
                <div>
                    <p class="modal-eyebrow">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß</p>
                    <h2>üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Section, Group, Station</h2>
                </div>
                <button class="icon-button" @onclick="CloseStationPicker">‚úñ</button>
            </header>
            <div class="modal-body">
                <label class="field">
                    <span class="field-label">‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
                    <input class="input" @bind="SearchFilter" @bind:event="oninput" @bind:after="FilterStations" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." />
                </label>

                @if (FilteredStationList.Count > 0)
                {
                    <div class="table-wrapper">
                        <table>
                            <thead>
                                <tr>
                                    <th>Section</th>
                                    <th>Group</th>
                                    <th>Station</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var station in FilteredStationList)
                                {
                                    <tr>
                                        <td>@station.Section</td>
                                        <td>@station.Group</td>
                                        <td>@station.Station</td>
                                        <td class="actions">
                                            <button class="btn primary"
                                                    @onclick="() => SelectStation(station)"
                                                    @onclick:stopPropagation="true">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="empty-state">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                }
            </div>
        </div>
    </div>
}

@if (ShowWorkOrderModal)
{
    <div class="modal-backdrop" @onclick="CloseWorkOrderModal">
        <div class="modal-card wide" @onclick:stopPropagation="true">
            <header class="modal-header">
                <div>
                    <p class="modal-eyebrow">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
                    <h2>üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Work Order</h2>
                </div>
                <button class="icon-button" @onclick="CloseWorkOrderModal">‚úñ</button>
            </header>
            <div class="modal-body">
                <label class="field">
                    <span class="field-label">‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
                    <input class="input" @bind="WorkOrderFilter" @bind:event="oninput" @bind:after="FilterWorkOrders" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." />
                </label>

                @if (FilteredMoList.Count > 0)
                {
                    <div class="table-wrapper">
                        <table>
                            <thead>
                                <tr>
                                    <th>Work Order</th>
                                    <th>Model</th>
                                    <th>Line</th>
                                    <th>Plan Start</th>
                                    <th>Plan End</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var mo in FilteredMoList)
                                {
                                    <tr>
                                        <td>@mo.WorkOrder</td>
                                        <td>@mo.Model</td>
                                        <td>@mo.Line</td>
                                        <td>@mo.PlanStart</td>
                                        <td>@mo.PlanEnd</td>
                                        <td class="actions">
                                            <button class="btn primary"
                                                    @onclick="() => SelectWorkOrder(mo)"
                                                    @onclick:stopPropagation="true">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="empty-state">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Order ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                }
            </div>
        </div>
    </div>
}

@code {
    private readonly MesOptions _mesOptions = new();
    private bool IsEditMode { get; set; }
    private bool ShowGetMoModal { get; set; }
    private bool ShowStationPicker { get; set; }
    private bool ShowWorkOrderModal { get; set; }
    private bool isLoading;

    private string StatusMessage { get; set; } = string.Empty;
    private string StatusLevel { get; set; } = "info";

    private string WorkOrder { get; set; } = string.Empty;
    private string Model { get; set; } = string.Empty;
    private string Line { get; set; } = string.Empty;
    private string Section { get; set; } = string.Empty;
    private string Group { get; set; } = string.Empty;
    private string Station { get; set; } = string.Empty;

    private string EmpNo { get; set; } = string.Empty;
    private string Factory { get; set; } = "DET6";
    private string InputLine { get; set; } = string.Empty;
    private string GetDataType { get; set; } = "0";
    private string MoType { get; set; } = "0";

    private string SearchFilter { get; set; } = string.Empty;
    private string WorkOrderFilter { get; set; } = string.Empty;

    private PendingMoConfig Pending { get; } = new();
    private List<StationInfo> StationList { get; } = new();
    private List<StationInfo> FilteredStationList { get; set; } = new();
    private List<WorkOrderEntry> MoResults { get; set; } = new();
    private List<WorkOrderEntry> FilteredMoList { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var configured = MesOptionsAccessor.Value;
        if (configured is not null)
        {
            _mesOptions.BaseUrl = configured.BaseUrl;
            _mesOptions.TokenId = configured.TokenId;
            _mesOptions.SecretKey = configured.SecretKey;
        }

        InputLine = Line;
    }

    private void OpenGetMoModal()
    {
        Pending.WorkOrder = WorkOrder;
        Pending.Model = Model;
        Pending.Line = string.IsNullOrWhiteSpace(InputLine) ? Line : InputLine;
        Pending.Section = Section;
        Pending.Group = Group;
        Pending.Station = Station;

        if (string.IsNullOrWhiteSpace(InputLine) && !string.IsNullOrWhiteSpace(Line))
        {
            InputLine = Line;
        }

        ShowGetMoModal = true;
        SetStatus(string.Empty, "info");
    }

    private async Task ToggleEditModeAsync()
    {
        if (!IsEditMode)
        {
            IsEditMode = true;
            return;
        }

        IsEditMode = false;
        await SaveWorkOrderSettingsAsync();
    }

    private Task SaveWorkOrderSettingsAsync()
    {
        SetStatus("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Order ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
        return Task.CompletedTask;
    }

    private void CloseGetMoModal()
    {
        ShowGetMoModal = false;
    }

    private async Task GetMOAsync()
    {
        if (!EnsureMesCredentials())
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(EmpNo) || string.IsNullOrWhiteSpace(Factory) || string.IsNullOrWhiteSpace(InputLine))
        {
            await JS.InvokeVoidAsync("alert", "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å EMP_NO, FACTORY ‡πÅ‡∏•‡∏∞ LINE_NAME ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            return;
        }

        isLoading = true;
        SetStatus("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MES...", "info");

        try
        {
            WorkOrderFilter = string.Empty;
            MoResults = await FetchWorkOrdersFromMesAsync();
            FilterWorkOrders();

            if (FilteredMoList.Count > 0)
            {
                ShowWorkOrderModal = true;
                ShowGetMoModal = false;
                SetStatus($"‡∏û‡∏ö {FilteredMoList.Count} Work Order", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Order ‡∏à‡∏≤‡∏Å MES");
                SetStatus("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Order", "warning");
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to fetch Work Orders from MES");
            await JS.InvokeVoidAsync("alert", $"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {ex.Message}");
            SetStatus("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MES", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<List<WorkOrderEntry>> FetchWorkOrdersFromMesAsync()
    {
        string param = $"EMP_NO{EmpNo}FACTORY{Factory}GETDATA_TYPE{GetDataType}LINE_NAME{InputLine}MO_TYPE{MoType}";
        string sign = MesSignatureHelper.CreateSignature(_mesOptions.SecretKey, param);

        var url =
            "QueryData/MOList" +
            $"?EMP_NO={Uri.EscapeDataString(EmpNo ?? string.Empty)}" +
            $"&FACTORY={Uri.EscapeDataString(Factory ?? string.Empty)}" +
            $"&GETDATA_TYPE={Uri.EscapeDataString(GetDataType ?? "0")}" +
            $"&LINE_NAME={Uri.EscapeDataString(InputLine ?? string.Empty)}" +
            $"&MO_TYPE={Uri.EscapeDataString(MoType ?? "0")}" +
            $"&sign={sign}";

        using var req = new HttpRequestMessage(HttpMethod.Get, url);
        if (!string.IsNullOrWhiteSpace(_mesOptions.TokenId))
        {
            req.Headers.TryAddWithoutValidation("TokenID", _mesOptions.TokenId);
        }

        var client = HttpClientFactory.CreateClient(GetAndEditWoServiceCollectionExtensions.MesClientName);
        using var res = await client.SendAsync(req);
        if (res.StatusCode == HttpStatusCode.Unauthorized)
        {
            throw new InvalidOperationException("MES unauthorized (401)");
        }

        res.EnsureSuccessStatusCode();

        var payload = await res.Content.ReadAsStringAsync();
        using var json = JsonDocument.Parse(payload);
        var root = json.RootElement;

        if (!root.TryGetProperty("Result", out var resultProp) ||
            !string.Equals(resultProp.GetString(), "OK", StringComparison.OrdinalIgnoreCase))
        {
            return new List<WorkOrderEntry>();
        }

        if (!root.TryGetProperty("Message", out var messages) || messages.ValueKind != JsonValueKind.Array)
        {
            return new List<WorkOrderEntry>();
        }

        var list = new List<WorkOrderEntry>();
        foreach (var item in messages.EnumerateArray())
        {
            var line = item.TryGetProperty("LINE_NAME", out var lineProp) ? lineProp.GetString() : null;
            if (!string.Equals(line?.Trim(), InputLine?.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            list.Add(new WorkOrderEntry
            {
                WorkOrder = item.TryGetProperty("MO_NUMBER", out var mo) ? mo.GetString() ?? string.Empty : string.Empty,
                Model = item.TryGetProperty("MODEL_NAME", out var model) ? model.GetString() ?? string.Empty : string.Empty,
                Line = line ?? string.Empty,
                PlanStart = item.TryGetProperty("PLAN_START_DATE", out var planStart) ? planStart.GetString() ?? string.Empty : string.Empty,
                PlanEnd = item.TryGetProperty("PLAN_END_DATE", out var planEnd) ? planEnd.GetString() ?? string.Empty : string.Empty
            });
        }

        return list;
    }

    private async Task OpenStationPickerAsync()
    {
        if (!EnsureMesCredentials())
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(EmpNo) || string.IsNullOrWhiteSpace(Factory) || string.IsNullOrWhiteSpace(InputLine))
        {
            await JS.InvokeVoidAsync("alert", "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å EMP_NO, FACTORY ‡πÅ‡∏•‡∏∞ LINE_NAME ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Station");
            return;
        }

        try
        {
            SearchFilter = string.Empty;
            await LoadStationsFromMesAsync();
            FilterStations();
            ShowStationPicker = true;
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to fetch stations from MES");
            await JS.InvokeVoidAsync("alert", $"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏î‡πâ: {ex.Message}");
        }
    }

    private async Task LoadStationsFromMesAsync()
    {
        string param = $"EMP_NO{EmpNo}FACTORY{Factory}LINE_NAME{InputLine}";
        string sign = MesSignatureHelper.CreateSignature(_mesOptions.SecretKey, param);

        var url =
            "QueryData/LineInfo" +
            $"?EMP_NO={Uri.EscapeDataString(EmpNo ?? string.Empty)}" +
            $"&FACTORY={Uri.EscapeDataString(Factory ?? string.Empty)}" +
            $"&LINE_NAME={Uri.EscapeDataString(InputLine ?? string.Empty)}" +
            $"&sign={sign}";

        using var req = new HttpRequestMessage(HttpMethod.Get, url);
        if (!string.IsNullOrWhiteSpace(_mesOptions.TokenId))
        {
            req.Headers.TryAddWithoutValidation("TokenID", _mesOptions.TokenId);
        }

        var client = HttpClientFactory.CreateClient(GetAndEditWoServiceCollectionExtensions.MesClientName);
        using var res = await client.SendAsync(req);
        if (res.StatusCode == HttpStatusCode.Unauthorized)
        {
            throw new InvalidOperationException("MES unauthorized (401)");
        }

        res.EnsureSuccessStatusCode();

        var payload = await res.Content.ReadAsStringAsync();
        using var json = JsonDocument.Parse(payload);
        var root = json.RootElement;

        if (!root.TryGetProperty("Result", out var resultProp) ||
            !string.Equals(resultProp.GetString(), "OK", StringComparison.OrdinalIgnoreCase))
        {
            StationList.Clear();
            FilteredStationList = new List<StationInfo>();
            return;
        }

        if (!root.TryGetProperty("Message", out var messages) || messages.ValueKind != JsonValueKind.Array)
        {
            StationList.Clear();
            FilteredStationList = new List<StationInfo>();
            return;
        }

        StationList.Clear();
        foreach (var item in messages.EnumerateArray())
        {
            StationList.Add(new StationInfo
            {
                Line = InputLine,
                Section = item.TryGetProperty("SECTION_NAME", out var section) ? section.GetString() ?? string.Empty : string.Empty,
                Group = item.TryGetProperty("GROUP_NAME", out var group) ? group.GetString() ?? string.Empty : string.Empty,
                Station = item.TryGetProperty("STATION_NAME", out var station) ? station.GetString() ?? string.Empty : string.Empty
            });
        }
    }

    private void FilterStations()
    {
        FilteredStationList = string.IsNullOrWhiteSpace(SearchFilter)
            ? StationList.ToList()
            : StationList.Where(s =>
                (s.Section ?? string.Empty).Contains(SearchFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (s.Group ?? string.Empty).Contains(SearchFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (s.Station ?? string.Empty).Contains(SearchFilter, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private void FilterWorkOrders()
    {
        FilteredMoList = string.IsNullOrWhiteSpace(WorkOrderFilter)
            ? MoResults.ToList()
            : MoResults.Where(m =>
                (m.WorkOrder ?? string.Empty).Contains(WorkOrderFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (m.Model ?? string.Empty).Contains(WorkOrderFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (m.Line ?? string.Empty).Contains(WorkOrderFilter, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private void CloseStationPicker()
    {
        ShowStationPicker = false;
    }

    private void CloseWorkOrderModal()
    {
        ShowWorkOrderModal = false;
    }

    private void SelectStation(StationInfo station)
    {
        Pending.Section = station.Section ?? string.Empty;
        Pending.Group = station.Group ?? string.Empty;
        Pending.Station = station.Station ?? string.Empty;
        ShowStationPicker = false;
    }

    private void SelectWorkOrder(WorkOrderEntry entry)
    {
        WorkOrder = entry.WorkOrder;
        Model = entry.Model;
        Line = entry.Line;
        Section = Pending.Section;
        Group = Pending.Group;
        Station = Pending.Station;
        InputLine = entry.Line;

        ShowWorkOrderModal = false;
        ShowGetMoModal = false;

        SetStatus($"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Work Order {WorkOrder} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
    }

    private void SetStatus(string message, string level)
    {
        StatusMessage = message;
        StatusLevel = string.IsNullOrWhiteSpace(level) ? "info" : level;
    }

    private bool EnsureMesCredentials()
    {
        if (string.IsNullOrWhiteSpace(_mesOptions.TokenId) || string.IsNullOrWhiteSpace(_mesOptions.SecretKey))
        {
            Logger.LogError("MES credentials are not configured. TokenId or SecretKey is missing.");
            SetStatus("‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Token ‡∏´‡∏£‡∏∑‡∏≠ Secret ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MES", "error");
            return false;
        }

        return true;
    }

    private sealed class PendingMoConfig
    {
        public string WorkOrder { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Line { get; set; } = string.Empty;
        public string Section { get; set; } = string.Empty;
        public string Group { get; set; } = string.Empty;
        public string Station { get; set; } = string.Empty;
    }

    private sealed class StationInfo
    {
        public string Line { get; set; } = string.Empty;
        public string Section { get; set; } = string.Empty;
        public string Group { get; set; } = string.Empty;
        public string Station { get; set; } = string.Empty;
    }

    private sealed class WorkOrderEntry
    {
        public string WorkOrder { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Line { get; set; } = string.Empty;
        public string PlanStart { get; set; } = string.Empty;
        public string PlanEnd { get; set; } = string.Empty;
    }
}
